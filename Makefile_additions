# **************************************************************************** #
#                                                                              #
#                                                         :::      ::::::::    #
#    G.U.T.  Gavin's Unit Testing Framework             :+:      :+:    :+:    #
#                                                     +:+ +:+         +:+      #
#    By: gfielder <marvin@42.fr>                    +#+  +:+       +#+         #
#                                                 +#+#+#+#+#+   +#+            #
#    Created: 2019/02/28 21:19:45 by gfielder          #+#    #+#              #
#    Updated: 2019/04/04 15:28:47 by gfielder         ###   ########.fr        #
#                                                                              #
# **************************************************************************** #

# ------------------------------------------------------------------------------
# The following targets are available:
#
#   make gut
#   make gut_clean
#   make gut_fclean
#   make gut_re
#
# It is recommended to add at least the gut_clean and gut_fclean to your own
# targets.
#
# G.U.T. reads your source files from SRC, INC, and LIB
#  - SRC must not include a main
#  - INC expects -I to be included
#  - LIB expects -L and -l to be included, or to be paths of static libraries
#
#  Changing this behavior can be done the fields below
# ------------------------------------------------------------------------------

GUT_SRC_TEST=gut/assert.c gut/test_main.c $(SRC)     # SRC is your variable
GUT_INC=-I. $(INC)                                   # INC is your variable
GUT_LIB=$(LIB)                                       # LIB is your variable

GUT_TEST_ONAME=test
GUT_CFLAGS=-Wall -Wextra -g
GUT_CC=clang
GUT_TEST_RESULTS=test_results.txt
GUT_UNIT_TEST_FILE=gut/unit_tests.c
GUT_INDEXED_TESTS=gut/unit_tests_indexed.c
GUT_TEST_DEFINES=-D TEST_OUTPUT_FILENAME="\"$(TEST_RESULTS)\""

gut: $(GUT_TEST_ONAME)

$(GUT_TEST_ONAME): $(GUT_SRC_TEST) gut_test_index
	@rm -f $(GUT_TEST_RESULTS)
	@$(GUT_CC) $(GUT_CFLAGS) $(GUT_INC) $(GUT_LIB) $(GUT_TEST_DEFINES) -o $(GUT_TEST_ONAME) $(GUT_SRC_TEST) $(GUT_INDEXED_TESTS)
	@echo "\x1B[0;32mSuccessfully made G.U.T unit testing utility. Directions:\x1B[0;0m\n    ./test [from] [[to]]   for a range of tests by number,\n    ./test [string]        to run all tests starting with [string],\n    ./test \"[str*ing]\"     (you can use * as wildcards if it's in double quotes),\n    ./test                 to run all tests."

$(GUT_INDEXED_TESTS): gut_test_index

.INTERMEDIATE: test_index
gut_test_index: $(GUT_UNIT_TEST_FILE)
	@echo "\x1B[33mIndexing tests..."
	@cp $(GUT_UNIT_TEST_FILE) $(GUT_INDEXED_TESTS)
	@sed -i .bak "s/return test(/return ft_printf(/g" $(GUT_INDEXED_TESTS)
	@echo "const t_unit_test g_unit_tests[] = {" >> $(GUT_INDEXED_TESTS)
	@cat $(GUT_UNIT_TEST_FILE) | grep -o "^int\s*[a-zA-Z0-9_]*(void)" | sed "s/^int\s*//g" | sed "s/(void)/,/g" | tr -d " \t\v\f" >> $(GUT_INDEXED_TESTS)
	@echo "NULL" >> $(GUT_INDEXED_TESTS)
	@echo "};" >> $(GUT_INDEXED_TESTS)
	@echo "" >> $(GUT_INDEXED_TESTS)
	@echo "const char *g_unit_test_names[] = {" >> $(GUT_INDEXED_TESTS)
	@cat $(GUT_UNIT_TEST_FILE) | grep -o "^int\s*[a-zA-Z0-9_]*(void)" | sed "s/^int\s*/\"/g    " | sed "s/(void)/\",/g" | tr -d " \t\v\f" >> $(GUT_INDEXED_TESTS)
	@echo "NULL" >> $(GUT_INDEXED_TESTS)
	@echo "};" >> $(GUT_INDEXED_TESTS)
	@echo "\x1B[33mTest index created. \x1B[1;36m$(shell cat $(GUT_UNIT_TEST_FILE) | grep -c "^int\s*[a-zA-Z0-9_]*(void)" | tr -d " \n\t") \x1B[0;33mout of $(shell cat $(GUT_UNIT_TEST_FILE) | grep -c "^\s*int\s*[a-zA-Z0-9_]*(void)" | tr -d " \n\t") tests are enabled.\x1B[0;0;0m"
	@rm -f *.bak

gut_clean:
	@rm -f $(GUT_INDEXED_TESTS)
	@rm -f $(GUT_TEST_RESULTS)
	@rm -f gut/*.bak

gut_fclean:
	@make gut_clean
	@rm -rf $(GUT_TEST_ONAME).dSYM
	@rm -rf $(GUT_TEST_ONAME)

gut_re:
	@make gut_fclean
	@make gut
